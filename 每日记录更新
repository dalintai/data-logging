2021-7-8
总计：39.5/56%

研究了下locust的多线程：
分布式进程

       Locust 是由 python 编写的，由于GIL的限制，单进程不能利用CPU多核的优势（实际测试结果也是一样，8核心的虚拟机，只有一核达到了95%以上的使用率，其余7核只围观，不出力）。
所以单台机器上想要尽可能的压榨 CPU，只能开启多进程，一般有多少个核心启多少进程。

单台多进程：

 先启一个 master

locust -f .\baidu.py --host="服务地址" --web-host="127.0.0.1" --master

 再启  slave
 说明：首先要知道负载机是几核，可以从任务管理器看到.

然后不需要指定地址，因为master已经指定了，同时！！网上的博客后面是slave，但新版本已经不用--slave了，而是替换成worker了！
一个命令面板启动一个，

locust -f .\baidu.py --worker

slave 节点启动后，在 locust 监控中能看到

 
=========================
7-11
=========================

重新分析了问题，发现现在存在部分瓶颈，正确率还是在56%，40道正确有22，所以接下来要以错题为主，再结合听课。


=========================
7-12
=========================
错题的错误率最低也才50%，简直可怕


=========================
7-13
=========================

还是按照计划来进行吧，按照50错；10新的计划执行试一试，很可能真的要失败。

妈的，被斩首了...

=========================
7-14
=========================
刷了几个错题还不错

=========================
7-15
=========================
未更新

=========================
7-20
=========================

错题降低差不多100，其余正常

了解到新的一款linux的漏洞扫描器：https://blog.csdn.net/ronghua_liu/article/details/5904670
但是还没有测试过

 1.环境：linux

2.安装skipfish前要有安装的软件如下

首先sudo -s，进入超级用户；
(PS:首先安装需要的工具包， apt-get install libssl-dev build-essential zlibc zlib-bin libidn11-dev libidn11），具体安装过程如下：

a.zlib 

wget http://prdownloads.sourceforge.net/libpng/zlib-1.2.5.tar.gz?download
tar -zxvf zlib-1.2.5.tar.gz
cd zlib-1.2.5
./configure
make & make install

b.OpenSSL

wget http://www.openssl.org/source/openssl-0.9.8n.tar.gz

tar -zxvf openssl-0.9.8n.tar.gz
cd openssl-0.9.8n
./config
make &  make install

c.libidn


wget http://ftp.gnu.org/gnu/libidn/libidn-1.8.tar.gz
tar -zxvf libidn-1.8
cd libidn-1.8
./configure
make &  make install

3.编译skipfish

wget http://skipfish.googlecode.com/files/skipfish-1.26b.tgz
tar -zxvf skipfish-1.26b.tgz
cd skipfish-1.26b
make all
 
好了，新生成了一个skipfish文件

4.使用skipfish

1.选择一个策略

  在skipfish/dictionaries目录下有几个 wl文件。看里面 README-FIRST
可以知道这几个文件就是要安全检测时的策略。选择一个wl。重命名为skipfish.wl,放在skipfish目录下
命令:
cd dictionaries
cp default.wl ../skipfish.wl

2.运行skipfish

./skipfish -o log http://www.baidu.com 


=========================
7-22
=========================
昨天忙了一天，没时间做题

然后发现一个安全网站，准备学习下

首先看到了初级内容，涉及三个工具：

burpsuite
       1.拦截包然后注入一个xss
              1.1<img scr=x onerror=alert(1)>
       2.密码爆破
     
sqlmap
       1.使用sqlmap进行注入
       2.过程：
              2.1首先使用./sqlmap -u "ip"来查看是否具有注入点
              2.2然后使用./sqlmap -u "ip" --dbs查看表结构
              2.3然后使用./sqlmap -u "ip" -D 数据表 --tables找到表里面的字段
              2.4然后使用./sqlmap -u "ip" -D 数据表 -T 字段名 --dump查看字段里面的详细内容
              

nmap
       1.windows安装nmap后，不能用powershell启动，只能使用cmd
              说明：-Pn： 禁用PING检测，这样速度快，并且可以防止有些主机无法ping通而被漏掉不扫描
       2.nmap -Pn ip -p 22,8080,3306对22，8080，3306这三个端口进行扫描
       3.nmap -Pn ip -p 1-100是对1~100端口号进行批量扫描
       4.nmap -sP 10.0.0.0/24是对主机进行批量扫描
       5.nmap -iL ip-address.txt是对ip-address文档里面的主机进行批量扫描
       6.nmap -Pn -A IP是对主机IP进行全面扫描，时间会非常长，对主机的操作系统扫描，脚本扫描，路由跟踪，服务探测。
       7.nmap 127.0.0.1-255     或者     nmap 127.0.0.1/24两个命令都是一样的，/24表示IP的子网掩码为255.255.255.0，
                            将子网掩码转成4个8位二进制，其中为1的部分是子网地址，为0的是主机地址，修改主机位即访问不同的主机，
                            如 127.0.0 属于网段，127.0.0.1/24就代表了127.0.0.1至127.0.0.255的所有主机
       8.nmap -Pn 47.106.80.112 -p 80,443,22,21,8080,25,53 -oG 报告.txt是对主机IP的80，443，22，21，8080，25，53端口进行扫描，并且将报告用-oG命名报告进行保存。



=========================
7-27
=========================

这次比较强，用python实现了smtp邮件发送

说明：
  首先email跟smtplib的包比较难装，使用pycharm随便装了一下，最后不知道怎么成功的。
  然后就是线程循环要在def里面做，而不是重新起一个循环，这个也要注意



#首先要导入smtp跟email的包
from email.mime.text import MIMEText
from time import ctime
import smtplib
import time 
#导入线程
import threading

def youjian():
    #for i in range(10):
    
#============  邮件操作  ====================

        #设置服务器所需信息
        #邮箱服务器地址
        mail_host = 'mail.impc.com.cn'
        #发送方用户名
        mail_user = 'test1@impc.com.cn'
        #密码(部分邮箱为授权码)
        mail_pass = 'kedian123.com'
        #邮件发送方邮箱地址
        sender = 'test1@impc.com.cn'
        #邮件接受方邮箱地址，注意需要[]包裹，这意味着你可以写多个邮件地址群发
        receivers = 'ceshi1@impc.com.cn'
        #设置email信息
        #邮件内容的编码格式，与内容
        message = MIMEText('content','plain','UTF-8')
        message['Subject'] = '多线程,qingchshou,zheshi womende neirong'
        #发送方信息
        message['From'] = sender
        #接受方信息
        message['To'] = receivers
        #登录并发送邮件
        smtpObj = smtplib.SMTP()
            #连接到服务器，SMTP的默认端口是25
        smtpObj.connect(mail_host,25)
            #登录到服务器
        smtpObj.login(mail_user,mail_pass)
            #发送
        smtpObj.sendmail(
                sender,receivers,message.as_string())
            #退出
        smtpObj.quit()
        print('send success')
        
#============  多线程操作  ====================

#def里面进行新建线程
        threads = []
#然后指向方法名
        t1 =  threading.Thread(target=youjian)

#最后就是线程循环数，固定式
        for i in range(1):
            c = threading.Thread(target=youjian())
            Threads.append(c)
        for c in Threads:
            c.start()
        for c in Threads:
            t.join(2)
#直接执行方法名
if __name__ == '__main__':
    youjian()
    print('end')
    
    
=========================
7-30
=========================
   
    低
    
=========================
8-2
=========================   
    
    一般，没什么希望了
 
=========================
8-3
=========================   
    
 fofa挺有意思，但是不会用
 
=========================
8-4
=========================  
 
 原本想完成hexo的个人博客，搭建比较简单，但是就是想跟github连接在一起没成功，没什么意思
 然后偏理计划有300道，也就是5天的样子，很失望
 
=========================
8-5
=========================  
 大力刷错，现阶段477，预计今日拉到450以下。   
    
=========================
8-8
=========================     
    之前并没有完成450以下，但是现在已经在430。效果还行  
=========================
8-9
=========================    
    错题还得刷掉，现在正确率从50的固定范围已经延伸到50～70了，加快速度，8-18要到3400道，现在才2400道
=========================
8-10
=========================   
    python发送邮件没有问题，但是邮件发送附件失败了，初步可能是邮件系统没有搞465端口，后期可以用自己的qq邮箱试一下
    题量2400，错题400，还需要加快速度，最近的40题，错10个
    然后就是多线程，现在多线程还没研究透，只能是说可以进行多线程运行，但是不知道怎么去限制线程数
=========================
8-11
========================= 
       邮件发送附件还是没有成功，然后使用qq邮箱也没成功，只成功了发送普通邮件
       
#coding=utf-8
import smtplib
from email.mime.text import MIMEText
msg_from='439098421@qq.com'                                 #发送方邮箱
passwd='baaomrsazpcebjab'                                   #填入发送方邮箱的授权码
msg_to='439098421@qq.com'                                  #收件人邮箱
                            
subject="python邮件测试"                                     #主题     
content="123"     #正文
msg = MIMEText(content)
msg['Subject'] = subject
msg['From'] = msg_from
msg['To'] = msg_to

s = smtplib.SMTP_SSL("smtp.qq.com",465)   #邮件服务器及端口号
# s.ehlo()  
# s.starttls()              
s.login(msg_from, passwd)
s.sendmail(msg_from, msg_to, msg.as_string())
print ("发送成功")

错题刷到390左右
做一套40，做一套20，对标率：17


=========================
8-12
========================= 
错题还是391，降低速度比较慢
今天2套40

=========================
8-13
========================= 
错题上400了，接下来还是要刷
今天研究了下Metasploit ，没有跟数据库连接成功，先简单的研究下使用，安装了wappalyzer插件，chrome与firefox都可以用，这个插件可以检测出系统的技术栈跟版本
=========================
8-16
========================= 
错题一大堆，还欠下1000多道题，正确率下降到50
日了狗了
=========================
8-17
========================= 
心态与注意力很重要，错题慢慢耍，题量还得保持上
=========================
8-18
========================= 
有点意思，错题稳在400左右，现在重新调整做题数目，正确率要达到18/20
发现了一个新的库，优势就是可以做异步，httpx，跟requests很像，可以试用下，官方文档：https://www.python-httpx.org/
=========================
8-19
========================= 
今天把错题过一过，然后把httpx的官方文档都过掉
=========================
8-23
========================= 
情况一般，区域稳定13/20
还需要大量刷题，现在刷题就现已20为节点，达到18/20可以扩展，
httpx文档还要继续看
=========================
8-26
========================= 
区域稳定，但还需要加强
httpx已经初步研究懂了，可以简单解释下：
requests：
       1.导入库：import requests
       2.请求引用：requests.post(url,headers,data/json)
locust：
       1.导入库：from locust import HttpUser,task,User
       2.请求引用：self.client.post(url,headers,data/json)
httpx:
       1.导入库：import httpx
       2.请求引用：httpx.post(url,headers,data/json)
       3.导入异步库：import asyncio
       4.新建异步类：async def main123():
       4.请求使用：await client.post(url,headers,data/json)
       5.运行：
              if __name__=="__main__":
                     asyncio.run(main1())
                     asyncio.run(main2())
                     asyncio.run(main3())
                     
说明：
       1.当使用class的时候，直接运行需要有if __name__=="__main__":，如果直接def开始，就可以直接运行，如果不管class还是def，都想用if __name__=="__main__":的话，
       格式如下：
       class test():
              def test_A():
              if __name__=="__main__":
                     test.test_A()
              
            
       def test_A():
       if __name__=="__main__":
              test_A()        
    
=========================
8-27
========================= 
题量上不去，这个需要重新调整
正确率卡住没动13/20
惨成狗，还卡住没动，一套7/20直接死掉，有点懵逼，怎么会这么低
最后这套效果不错，达到最好成绩，也是最接近对标要求：16/20 难度4.4
还需要继续，第一难度低，第二分数不稳定
=========================
8-31
========================= 
相当不稳定，还出现了下滑

=========================
9-07
========================= 
今天两套还行，虽然没又太大提升，接下来准备了解数量类型的题目

=========================
9-13
=========================
好久没做，正确率大幅度下降，心态不好，还是要保持住13/20+的情况

=========================
9-16
=========================

# coding:utf-8
import requests
import websocket


import json
from websocket import create_connection

url = 'ws://82.157.123.54:9010/ajaxchattest'#websocket连接地址，地址为虚拟地址
websocket.enableTrace(True)                      #打开跟踪，查看日志

ws = create_connection(url)           #创建连接
data =input('输入传输消息:')    
data2 ='11111111111'   #测试数据
data3 = {
		"username":"test",
		"password":"123456",
		"version":0.5
}


    # new_data=json.dumps(data,ensure_ascii=False)     #将data转化为字符串
ws.send(json.dumps(data3))                                #发送请求
print('收到回复消息:',ws.recv()) 
print('状态码：',ws.getstatus())
print('响应头部:',ws.headers)       


=========================
9-24
=========================
长时间不做正确率特别低，计划重新调整，总计60，上午20，下午40，没事刷常识，晚上听数量





















































































































